#include <algorithm>

#include "gmock/gmock.h"
#include "gtest/gtest.h"

#include "src/lib/map_reader/mapblock.h"

using ::testing::ElementsAreArray;
using ::testing::Eq;
using ::testing::Ne;
using ::testing::Not;
using ::testing::SizeIs;

/*
  $ sqlite3 ./worlds/world/map.sqlite \
    "select hex(data) from blocks where pos = 201506813;" | \
    sed -E 's/(..)/0x\1,/g'
*/

// One map block.
// Stone floor.
// Chest w/ 3 minegeld.
// Furnace holding uncooked silversand.
// One prot block.
static const std::vector<uint8_t> format_28_input = {
    0x1C, 0x02, 0xFF, 0xFF, 0x02, 0x02, 0x78, 0x5E, 0xED, 0xD8, 0x4B, 0x0E,
    0x82, 0x30, 0x14, 0x85, 0x61, 0x7C, 0x4C, 0x6D, 0x57, 0x20, 0xEC, 0x00,
    0x56, 0x60, 0xD8, 0x81, 0xFB, 0x5F, 0x8E, 0xB7, 0x0C, 0xF4, 0x16, 0xD4,
    0x3B, 0xA2, 0xF4, 0xF1, 0xD7, 0x98, 0xD8, 0x10, 0xD3, 0x9E, 0xEF, 0x54,
    0x4C, 0xE8, 0x3A, 0x06, 0x02, 0x08, 0x20, 0x80, 0x00, 0x02, 0x08, 0x24,
    0x10, 0x38, 0x75, 0xFA, 0x95, 0x60, 0x41, 0x96, 0xC8, 0x4A, 0x80, 0xFE,
    0xB3, 0xAA, 0x23, 0xF9, 0x66, 0xE8, 0x3F, 0x39, 0x79, 0x56, 0x0B, 0xD2,
    0x7F, 0x56, 0x75, 0x24, 0xDF, 0x8C, 0xDD, 0xFF, 0x59, 0xF6, 0x74, 0x91,
    0xF7, 0x35, 0xF9, 0xDE, 0x58, 0x70, 0x7F, 0x01, 0xBB, 0xFF, 0xFD, 0xF7,
    0xC0, 0x0A, 0xC7, 0x09, 0xD0, 0xFF, 0x71, 0xF6, 0xAC, 0x8C, 0x00, 0x02,
    0x08, 0x20, 0x80, 0x00, 0x02, 0x08, 0x20, 0x80, 0x40, 0xD3, 0x02, 0x8E,
    0x11, 0x0B, 0xF8, 0x68, 0x38, 0x57, 0xDB, 0xDC, 0xEA, 0xBB, 0xB6, 0xBC,
    0xEB, 0x3C, 0x75, 0xE5, 0xF7, 0xFA, 0x7C, 0xCA, 0xE7, 0xE8, 0xBC, 0x7E,
    0x9D, 0xD7, 0x9B, 0x5F, 0x92, 0xF5, 0x37, 0xE5, 0x11, 0x92, 0x6E, 0xE7,
    0xB5, 0xE6, 0x97, 0x5C, 0x7E, 0x18, 0xEF, 0xEF, 0xFC, 0x61, 0xEE, 0x95,
    0xC7, 0x32, 0x17, 0x0F, 0x3D, 0xE4, 0xB8, 0x6C, 0x46, 0x59, 0xBF, 0x7F,
    0x75, 0xFE, 0x9D, 0x1B, 0xA6, 0x79, 0xFC, 0xF4, 0x1F, 0x3C, 0xA6, 0x3E,
    0x9A, 0xFB, 0xC1, 0x6A, 0xBF, 0xB4, 0xFB, 0xBD, 0xCE, 0xEF, 0xBB, 0xF9,
    0xF9, 0x50, 0x79, 0x25, 0x7E, 0xE4, 0xE1, 0x17, 0x8F, 0x68, 0xAC, 0xA6,
    0xE1, 0x5A, 0xB1, 0xFD, 0x87, 0x78, 0x3A, 0xAF, 0x04, 0x89, 0xFA, 0x0F,
    0xC1, 0x6A, 0xEE, 0xFF, 0x47, 0xDE, 0xBA, 0xFF, 0xFF, 0x56, 0xE7, 0x55,
    0xFA, 0xB5, 0xCE, 0xAF, 0x75, 0x07, 0xB0, 0xBE, 0x5F, 0xFA, 0x75, 0xF2,
    0xFF, 0x17, 0x28, 0xBD, 0x5F, 0x6B, 0xFF, 0xF4, 0x6F, 0x09, 0x34, 0x75,
    0xBD, 0xE9, 0x87, 0x1F, 0x84, 0x47, 0x00, 0x01, 0x04, 0x10, 0x40, 0x00,
    0x01, 0x04, 0x10, 0x40, 0x00, 0x01, 0x04, 0x10, 0x40, 0xA0, 0x11, 0x81,
    0x17, 0x9F, 0x25, 0xEE, 0x90, 0x78, 0x5E, 0xD5, 0x54, 0x4D, 0x8B, 0xDB,
    0x30, 0x10, 0x55, 0x53, 0xDA, 0x4D, 0x0D, 0xED, 0xA5, 0x47, 0x43, 0xD1,
    0xA5, 0x90, 0x80, 0x09, 0xFE, 0x88, 0x37, 0x69, 0x74, 0x29, 0x2C, 0x0E,
    0x2C, 0xF4, 0x50, 0x4A, 0xA1, 0x87, 0xB0, 0x35, 0x8A, 0x2D, 0x3B, 0x02,
    0x5B, 0x36, 0x92, 0x92, 0x5D, 0xF7, 0x3F, 0xED, 0x1F, 0x29, 0xA5, 0xBF,
    0xA9, 0x92, 0xED, 0x64, 0xED, 0xDD, 0xC6, 0xD0, 0x63, 0x2F, 0x06, 0xCF,
    0x7B, 0xA3, 0x99, 0x79, 0x1A, 0xBD, 0x11, 0x78, 0x7E, 0xF1, 0x13, 0x00,
    0xF0, 0x0C, 0x8C, 0x29, 0x4B, 0x0A, 0x49, 0xEE, 0xA4, 0xFA, 0x7B, 0x6B,
    0x4E, 0xBE, 0x7E, 0x8C, 0x49, 0x82, 0xF7, 0x99, 0x9C, 0x5E, 0xED, 0x88,
    0x90, 0x66, 0x00, 0x3E, 0x51, 0x21, 0x61, 0x8E, 0x29, 0x83, 0x9E, 0x6B,
    0x7C, 0xA3, 0xB1, 0xDC, 0x41, 0xDB, 0xB8, 0x96, 0x24, 0x87, 0xD1, 0x9E,
    0x73, 0xC2, 0xA2, 0x6A, 0x95, 0x53, 0x46, 0x52, 0x92, 0xC5, 0xA1, 0x63,
    0x1B, 0x41, 0x5E, 0xCA, 0xEA, 0xFF, 0xFC, 0xB2, 0xF8, 0x9A, 0x1D, 0x08,
    0x93, 0x05, 0xAF, 0xF4, 0xD0, 0x46, 0xD0, 0x09, 0x18, 0x17, 0xBF, 0x94,
    0x40, 0x2F, 0x7B, 0x72, 0x65, 0x5D, 0xB9, 0xD6, 0x7B, 0xCE, 0x70, 0x44,
    0x20, 0x55, 0x5F, 0x49, 0x0F, 0xC4, 0x0C, 0x8C, 0x2E, 0x3C, 0xD1, 0x8A,
    0xAD, 0xA0, 0xB9, 0xEE, 0x06, 0xCD, 0xB5, 0x6D, 0x06, 0xEF, 0xCD, 0xC0,
    0x0C, 0x10, 0x5C, 0xEF, 0x49, 0xF6, 0x18, 0xAF, 0xB5, 0xD4, 0xF0, 0x54,
    0xDD, 0x03, 0x18, 0x27, 0x05, 0xCF, 0x45, 0x49, 0x22, 0x00, 0x46, 0xF7,
    0x82, 0xFE, 0x20, 0x9B, 0xA5, 0xB5, 0x9C, 0xF9, 0x37, 0x99, 0xEA, 0x75,
    0x13, 0x15, 0x4C, 0x5F, 0x22, 0x12, 0x3C, 0x42, 0xEE, 0x6C, 0xE1, 0x5B,
    0xF6, 0xCC, 0x47, 0x8E, 0xE5, 0xA0, 0x3E, 0x9C, 0xA8, 0x2A, 0x0D, 0xEE,
    0x1E, 0x71, 0x9A, 0xE3, 0x94, 0x6C, 0xEA, 0x98, 0xD3, 0xC6, 0xDA, 0x15,
    0x08, 0x93, 0x66, 0xA6, 0x30, 0xA1, 0x9C, 0x84, 0xDB, 0x74, 0x56, 0xB2,
    0xF4, 0xA6, 0xA1, 0x7B, 0x5D, 0x7A, 0xBA, 0xA7, 0x27, 0x2A, 0xE6, 0xBC,
    0xB8, 0x6D, 0xB9, 0xDF, 0x37, 0x92, 0x63, 0x26, 0x74, 0xDB, 0x5F, 0xDC,
    0x85, 0xDD, 0xEF, 0x24, 0x16, 0x12, 0xCD, 0x9B, 0x46, 0x3F, 0x5C, 0x22,
    0xD7, 0x72, 0x8F, 0x9D, 0xD6, 0x4B, 0x25, 0xC3, 0x32, 0xC3, 0x15, 0xE1,
    0x48, 0x2F, 0x1E, 0xB2, 0xAD, 0xF9, 0xCC, 0xF5, 0xD1, 0xF2, 0x61, 0x9C,
    0xBF, 0x92, 0x7C, 0xD5, 0xFE, 0xD2, 0xF2, 0xD0, 0xB2, 0xAE, 0xC4, 0x29,
    0x4B, 0x4F, 0xB2, 0xA8, 0x6A, 0x9D, 0xE0, 0xD3, 0xEC, 0xA7, 0x19, 0x4A,
    0xC8, 0x7F, 0xCC, 0xD0, 0xDA, 0x0E, 0xA7, 0x34, 0xDA, 0xB5, 0xD3, 0xE8,
    0xCB, 0xD1, 0xCA, 0xED, 0xB6, 0x7D, 0x69, 0x9D, 0x66, 0xD8, 0x73, 0xB0,
    0x3B, 0x0C, 0x7B, 0xC3, 0xF0, 0x7C, 0x18, 0xF6, 0x87, 0xE1, 0xCB, 0x61,
    0x78, 0x71, 0x0E, 0x56, 0xBB, 0xAB, 0xE4, 0x0C, 0x25, 0xCD, 0x89, 0xF6,
    0x1C, 0x1B, 0x80, 0x57, 0x5A, 0xAC, 0x6E, 0xE0, 0xB5, 0x06, 0x79, 0x48,
    0x32, 0x5C, 0x0A, 0x12, 0xB7, 0xAC, 0x37, 0x0D, 0xAB, 0x90, 0x38, 0x7B,
    0xC8, 0xAD, 0xFD, 0x48, 0x1D, 0x07, 0x9D, 0xBE, 0x1B, 0xB5, 0x4B, 0xBB,
    0x12, 0x34, 0x3B, 0xA8, 0x93, 0x04, 0x66, 0x31, 0xF4, 0x7A, 0x6F, 0xB8,
    0x7E, 0xD4, 0x75, 0xBA, 0x3E, 0xB7, 0x93, 0xDF, 0x7A, 0xD6, 0xE3, 0xF7,
    0x5F, 0x53, 0xD5, 0xE6, 0xC0, 0xF9, 0xA9, 0xD2, 0x59, 0x77, 0x1B, 0xF6,
    0x8E, 0xDF, 0x6A, 0xA0, 0x51, 0xCF, 0x3B, 0xDE, 0x7D, 0xE6, 0xCA, 0x75,
    0x95, 0x53, 0x14, 0x0C, 0x4E, 0x8A, 0x5B, 0x46, 0x62, 0xB8, 0xAD, 0xA0,
    0xA8, 0x04, 0x8E, 0x95, 0x9B, 0x4E, 0x01, 0x78, 0xA1, 0x83, 0x5C, 0xE5,
    0x8D, 0x8F, 0x41, 0xD0, 0xF3, 0xA3, 0x3F, 0xC5, 0x9A, 0xE9, 0x24, 0x00,
    0x00, 0x00, 0x03, 0xA9, 0x46, 0xEB, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
    0x11, 0x70, 0x72, 0x6F, 0x74, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3A, 0x70,
    0x72, 0x6F, 0x74, 0x65, 0x63, 0x74, 0x00, 0x03, 0x00, 0x0F, 0x64, 0x65,
    0x66, 0x61, 0x75, 0x6C, 0x74, 0x3A, 0x66, 0x75, 0x72, 0x6E, 0x61, 0x63,
    0x65, 0x00, 0x02, 0x00, 0x0D, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,
    0x3A, 0x63, 0x68, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x03, 0x61, 0x69,
    0x72, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,
    0x3A, 0x73, 0x74, 0x6F, 0x6E, 0x65, 0x0A, 0x00, 0x00};

void DumpNodes(const std::vector<Node> &nodes,
               const IdMap<NodeIdMapExtraInfo> &id_map) {
  const uint16_t air = id_map.Get("air").id;
  for (int i = 0; i < 4096; i++) {
    const auto &node = nodes.at(i);
    if (node.param0() != air) {
      std::cout << i << " " << node.param0() << " "
                << id_map.Get(node.param0()).key << "\n";
    }
  }
}

void DumpInventory(const Inventory &inv) {
  for (const auto &list : inv.lists()) {
    std::cout << list.first << "\n";
    for (const auto &item : list.second.items()) {
      if (!item.empty()) {
        std::cout << "  " << item << "\n";
      }
    }
  }
}

TEST(MapBlock, Format28) {
  IdMap<NodeIdMapExtraInfo> id_map;
  ThreadLocalIdMap<NodeIdMapExtraInfo> id_cache(id_map);

  BlobReader blob_reader(format_28_input);
  MapBlock m;
  m.deserialize(blob_reader, 0, id_cache);

  EXPECT_THAT(m.version(), Eq(28));
  EXPECT_THAT(m.unique_content_ids(), Eq(5));
  EXPECT_THAT(id_map, SizeIs(5));

  // Did we find the expected node names?
  const std::vector<std::string> expected_node_names = {
      "air", "default:chest", "default:furnace", "default:stone",
      "protector:protect"};

  std::vector<std::string> found_node_names;
  for (size_t i = 0; i < id_map.size(); ++i) {
    found_node_names.push_back(id_map.Get(i).key);
  }
  std::sort(found_node_names.begin(), found_node_names.end());
  EXPECT_THAT(found_node_names, ElementsAreArray(expected_node_names));

  // DumpNodes(m.nodes(), id_map);

  // Chest (w/ minegeld inventory)
  const Node &chest = m.nodes().at(1994);
  EXPECT_THAT(id_map.Get(chest.param0()).key, Eq("default:chest"));
  // DumpInventory(chest.inventory());
  EXPECT_THAT(chest.inventory().total_minegeld(), Eq(10));

  // Furnace (w/ uncooked sand, no fuel, no outputs)
  const Node &furnace = m.nodes().at(1996);
  EXPECT_THAT(id_map.Get(furnace.param0()).key, Eq("default:furnace"));
  // DumpInventory(furnace.inventory());
  const auto furnace_src = furnace.inventory().lists().find("src");
  ASSERT_THAT(furnace_src, Ne(furnace.inventory().lists().end()));
  EXPECT_THAT(furnace_src->second, SizeIs(1));
  EXPECT_THAT(furnace_src->second.items().at(0), Eq("default:silver_sand 3"));

  // Protection block (owned)
  const Node &prot = m.nodes().at(1998);
  EXPECT_THAT(id_map.Get(prot.param0()).key, Eq("protector:protect"));
  // DumpInventory(prot.inventory());
  EXPECT_THAT(prot.get_owner(), Eq("sysadmin"));
}
